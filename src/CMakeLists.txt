set(TARGET_NAME ${PROJECT_NAME})

find_package(QT NAMES Qt6 Qt5 CONFIG REQUIRED COMPONENTS Widgets Network)
find_package(Qt${QT_VERSION_MAJOR} CONFIG REQUIRED COMPONENTS Widgets Network)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

if(BUILD_QMWIDGETS_SHARED_LIBS OR BUILD_SHARED_LIBS)
    add_library(${TARGET_NAME} SHARED)
    target_compile_definitions(${TARGET_NAME} PRIVATE QMWIDGETS_COMPILE_LIB)
else()
    add_library(${TARGET_NAME} STATIC)
    target_compile_definitions(${TARGET_NAME} PUBLIC QMWIDGETS_BUILD_STATIC)
endif()

target_link_libraries(${TARGET_NAME} PUBLIC Qt${QT_VERSION_MAJOR}::Widgets)
target_precompile_headers(${TARGET_NAME} PRIVATE "stdafx.h")
target_include_directories(${TARGET_NAME} PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
    $<INSTALL_INTERFACE:include>
)

set(PRIVATE_SOURCES
    qmassets.qrc
    qmanalogclock.h
    qmanalogclock.cpp
    qmcirclelight.h
    qmcirclelight.cpp
    qmgaugecar.h
    qmgaugecar.cpp
    qmimageanalogclock.h
    qmimageanalogclock.cpp
    qmlogindialog.h
    qmlogindialog.cpp
    qmlogindialog.ui
    qmswitch.h
    qmswitch.cpp
    qmthermometer.h
    qmthermometer.cpp
    qmcirclestatus.h
    qmcirclestatus.cpp
    qmframelesswindow.h
    qmframelesswindow.cpp
    qmcrossbutton.h
    qmcrossbutton.cpp
    qmgradientseparator.h
    qmgradientseparator.cpp
    qmautoreturnslider.h
    qmautoreturnslider.cpp
    qmimageslider.h
    qmimageslider.cpp
    qmninepatchpixmap.h
    qmninepatchpixmap.cpp
    qmdynamicmessage.h
    qmdynamicmessage.cpp
    qmtitlecontainer.h
    qmtitlecontainer.cpp
    qmblinklabel.h
    qmblinklabel.cpp
    qmshadowhelperwidget.h
    qmshadowhelperwidget.cpp
    qmcollapsiblewidget.h
    qmcollapsiblewidget.cpp
    qmimagebutton.h
    qmimagebutton.cpp
    qmimageshadowwidget.h
    qmimageshadowwidget.cpp
    qmasyncblockerwidget.h
    qmasyncblockerwidget.cpp
)

target_sources(${TARGET_NAME} PRIVATE ${PRIVATE_SOURCES})

if(TAKEOVER_WIN32_HTCAPTION_EVENT)
    # set(TAKEOVER_WIN32_HTCAPTION_EVENT)
endif()

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/qmwidgets_config.h.in ${CMAKE_CURRENT_BINARY_DIR}/qmwidgets_config.h @ONLY)

if(BUILD_QMWIDGETS_DESIGNER_PLUGIN)
    add_subdirectory(plugins)
endif()

if(BUILD_QMWIDGETS_QRCODEVIEW)
    target_sources(${TARGET_NAME} PRIVATE qmqrcodeview.cpp qmqrcodeview.h)
    target_link_libraries(${TARGET_NAME} PRIVATE qrencode)
endif()

if(BUILD_QMWIDGETS_HARDWARE_MONITOR)
    target_sources(${TARGET_NAME} PRIVATE qmhardwareinfo.h)

    if(WIN32)
        target_sources(${TARGET_NAME} PRIVATE qmhardwareinfo_win.cpp)
    endif()
endif()

if(QMWIDGET_INSTALL)
    get_target_property(_header_files ${TARGET_NAME} SOURCES)
    list(FILTER _header_files INCLUDE REGEX ".*\\.h$")
    list(TRANSFORM _header_files PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/")

    install(TARGETS ${TARGET_NAME} EXPORT QmWidgetsTargets
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    )
    install(FILES ${_header_files} TYPE INCLUDE)
    install(EXPORT QmWidgetsTargets
        FILE qmwidgetsWidgets.cmake
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/qmwidgets
    )

    include(CMakePackageConfigHelpers)
    configure_package_config_file(
        "${CMAKE_CURRENT_SOURCE_DIR}/../cmake/qmwidgetsConfig.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/qmwidgetsConfig.cmake"
        INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/qmwidgets"
    )
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/qmwidgetsConfig.cmake DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/qmwidgets")
endif()